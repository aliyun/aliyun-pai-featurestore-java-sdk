package com.aliyun.openservices.paifeaturestore.api;

import com.aliyun.openservices.paifeaturestore.FeatureStoreClient;
import com.aliyun.openservices.paifeaturestore.domain.FeatureResult;
import com.aliyun.openservices.paifeaturestore.domain.FeatureView;
import com.aliyun.openservices.paifeaturestore.domain.Project;

import java.lang.reflect.Array;
import java.util.Arrays;

public class FeatureDBTest {
    //fdb vpc connect test
    @org.junit.Test
    public void featureDBNormalTest() throws Exception {
        String projectName = "fdb_normal_test";
        String featureViewName = "sdk_performance_test_user_table";
        Configuration cf = new Configuration("cn-shenzhen", Constants.accessId, Constants.accessKey, projectName);
        cf.setDomain(Constants.host);//默认vpc环境，现在是本机
        cf.setUsername(Constants.username);
        cf.setPassword(Constants.password);
        ApiClient client = new ApiClient(cf);

//        FeatureStoreClient featureStoreClient = new FeatureStoreClient(client,Constants.usePublicAddress);
        FeatureStoreClient featureStoreClient = new FeatureStoreClient(client);

        Project project = featureStoreClient.getProject(projectName);
        if (null == project) {
            throw new RuntimeException("project not found");
        }
        FeatureView featureView = project.getFeatureView(featureViewName);
        if (null == featureView) {
            throw new RuntimeException("featureview not found");
        }
        //200、100、50、10、1
        String[] joinId200s = {"5373471048", "5373473350", "5373486790", "5373496980", "5373504235", "5373507432", "5373512598", "5373530470", "5373538689", "5373538704", "5373554177", "5373554199", "5373559230",
                "5373559238", "5373561379", "5373564344", "5373584811", "5373589932", "5373589947", "5373594753", "5373596977", "5373609222", "5373615116", "5373617261", "5373620103", "5373625133",
                "5373630038", "5373632159", "5373639048", "5373654658", "5373654791", "5373664731", "5373671699", "5373674481", "5373684581", "5373708626", "5373713751", "5373724517", "5373739612",
                "5373746806", "5373756946", "5373774058", "5373774868", "5373779798", "5373781928", "5373784882", "5373786976", "5373811946", "5373822444", "5373840378", "5373850830", "5373854241",
                "5373864989", "5373867117", "5373875984", "5373881346", "5373883694", "5373885823", "5373898400", "5373934190", "5373934195", "5373960350", "5373964550", "5373967033 ", "5373973310",
                "5373973320", "5373973322", "5373979622", "5373986048", "5374005004", "5374011509", "5374020071", "5374030684", "5374030749", "5374036513", "5374067732", "5374104115", "5374110143",
                "5374128009", "5374160076", "5374169693", "5374175634", "5374181705", "5374187574", "5374205178", "5374235265", "5374238395", "5374249040", "5374259665", "5374264951", "5374286230",
                "5374293741", "5374302129", "5374312948", "5374323635", "5374323637", "5374338579", "5374363487", "5374396137", "5374432956", "5374459774", "5374465315", "5374466512", "5374472305",
                "5374483784", "5374483799", "5374605716", "5374611103", "5374620665", "5374621895", "5374627211", "5374638084", "5374638147", "5374653120", "5374654015", "5374654025", "5374677265",
                "5374691292", "5374712697", "5374723414", "5374728779", "5374734106", "5374771813", "5374902163", "5374914097", "5374924316", "5374930200", "5374931625", "5374931628", "5374956219",
                "5374980667", "5374984190", "5375015821", "5375027026", "5375032559", "5375032718", "5375038171", "5375043752", "5375045885", "5375067581", "5375075870", "5375075876", "5375090357",
                "5375095572", "5375100766", "5375122072", "5375127180", "5375157440", "5375181022", "5375185585", "5375301780", "5375308353", "5375327298", "5375332056", "5375350816", "5375355340",
                "5375355356", "5375359972", "5375359977", "5375362113", "5375369068", "5375369074", "5375373685", "5375396508", "5375405727", "5375410259", "5375419419", "5375423613", "5375437708",
                "5375446833", "5375456230", "5375469848", "5375474494", "5375476620", "5375497248", "5375504311", "5375701092", "5375708806", "5375915527", "5375915529", "5375931282", "5375931287",
                "5375942705", "5375949357", "5375956341", "5375987929", "5375997093", "5376014531", "5376034783", "5376034799", "5376047569", "5376047579", "5376069431", "5376077814", "5376089561",
                "5376133783", "5376139562", "5376141737", "5376150889", "5376150905"};
        String[] joinId100s = {"5373471048", "5373473350", "5373486790", "5373496980", "5373504235", "5373507432", "5373512598", "5373530470", "5373538689", "5373538704", "5373554177", "5373554199", "5373559230",
                "5373559238", "5373561379", "5373564344", "5373584811", "5373589932", "5373589947", "5373594753", "5373596977", "5373609222", "5373615116", "5373617261", "5373620103", "5373625133",
                "5373630038", "5373632159", "5373639048", "5373654658", "5373654791", "5373664731", "5373671699", "5373674481", "5373684581", "5373708626", "5373713751", "5373724517", "5373739612",
                "5373746806", "5373756946", "5373774058", "5373774868", "5373779798", "5373781928", "5373784882", "5373786976", "5373811946", "5373822444", "5373840378", "5373850830", "5373854241",
                "5373864989", "5373867117", "5373875984", "5373881346", "5373883694", "5373885823", "5373898400", "5373934190", "5373934195", "5373960350", "5373964550", "5373967033 ", "5373973310",
                "5373973320", "5373973322", "5373979622", "5373986048", "5374005004", "5374011509", "5374020071", "5374030684", "5374030749", "5374036513", "5374067732", "5374104115", "5374110143",
                "5374128009", "5374160076", "5374169693", "5374175634", "5374181705", "5374187574", "5374205178", "5374235265", "5374238395", "5374249040", "5374259665", "5374264951", "5374286230",
                "5374293741", "5374302129", "5374312948", "5374323635", "5374323637", "5374338579", "5374363487", "5374396137", "5374432956"};
        String[] joinId50s = {"5373471048", "5373473350", "5373486790", "5373496980", "5373504235", "5373507432", "5373512598", "5373530470", "5373538689", "5373538704", "5373554177", "5373554199", "5373559230",
                "5373559238", "5373561379", "5373564344", "5373584811", "5373589932", "5373589947", "5373594753", "5373596977", "5373609222", "5373615116", "5373617261", "5373620103", "5373625133",
                "5373630038", "5373632159", "5373639048", "5373654658", "5373654791", "5373664731", "5373671699", "5373674481", "5373684581", "5373708626", "5373713751", "5373724517", "5373739612",
                "5373746806", "5373756946", "5373774058", "5373774868", "5373779798", "5373781928", "5373784882", "5373786976", "5373811946", "5373822444", "5373840378"};
        String[] joinId10s = {"5373471048", "5373473350", "5373486790", "5373496980", "5373504235", "5373507432", "5373512598", "5373530470", "5373538689", "5373538704"};

        String[] joinId1s = {"5373471048"};
        //
//        FeatureResult results = featureView.getOnlineFeatures(joinIds);
        double[] costs=new double[100000];
        for(int i=0;i<100000;i++){
            long start = System.nanoTime();
            FeatureResult results = featureView.getOnlineFeatures(joinId200s, new String[]{"*"}, null);
            long end = System.nanoTime();
            costs[i]= Double.valueOf(String.format("%.2f",(end - start) /  1000000.0));
            if (null == results.getFeatureData()) {
                System.out.println("not found data");
            }else {
//            while (results.next()) {
//                for (String field : results.getFeatureFields()) {
//                    System.out.printf("%s = %s\t", field, results.getObject(field));
//                }
                System.out.println("data length:"+results.getFeatureData().size());
//            }
            }
        }

        double avergeTime = Arrays.stream(costs).average().orElse(0.0);
        double tp90 = calculateTP(costs, 90);
        double tp95 = calculateTP(costs, 95);
        double tp99 = calculateTP(costs, 99);
        System.out.println("Average time: " + String.format("%.2f ms", avergeTime));
        System.out.println("TP90: " + String.format("%.2f ms", tp90));
        System.out.println("TP95: " + String.format("%.2f ms", tp95));
        System.out.println("TP99: " + String.format("%.2f ms", tp99));


    }

//    @org.junit.Test
    public void featureDBVPCTest() throws Exception {
        String projectName = "fdb_high_speed";
        String featureViewName = "sdk_performance_test_user_table";
        Configuration cf = new Configuration("cn-shenzhen", Constants.accessId, Constants.accessKey, projectName);
        cf.setDomain(Constants.host);//默认vpc环境，现在是本机
        cf.setUsername(Constants.username);
        cf.setPassword(Constants.password);
        ApiClient client = new ApiClient(cf);

//        FeatureStoreClient featureStoreClient = new FeatureStoreClient(client,Constants.usePublicAddress);
        FeatureStoreClient featureStoreClient = new FeatureStoreClient(client);
        Project project = featureStoreClient.getProject(projectName);
        if (null == project) {
            throw new RuntimeException("project not found");
        }
        FeatureView featureView = project.getFeatureView(featureViewName);
        if (null == featureView) {
            throw new RuntimeException("featureview not found");
        }

        double[] costs = new double[100000];
        //200、100、50、10、1
        String[] joinId200s = {"5373471048", "5373473350", "5373486790", "5373496980", "5373504235", "5373507432", "5373512598", "5373530470", "5373538689", "5373538704", "5373554177", "5373554199", "5373559230",
                "5373559238", "5373561379", "5373564344", "5373584811", "5373589932", "5373589947", "5373594753", "5373596977", "5373609222", "5373615116", "5373617261", "5373620103", "5373625133",
                "5373630038", "5373632159", "5373639048", "5373654658", "5373654791", "5373664731", "5373671699", "5373674481", "5373684581", "5373708626", "5373713751", "5373724517", "5373739612",
                "5373746806", "5373756946", "5373774058", "5373774868", "5373779798", "5373781928", "5373784882", "5373786976", "5373811946", "5373822444", "5373840378", "5373850830", "5373854241",
                "5373864989", "5373867117", "5373875984", "5373881346", "5373883694", "5373885823", "5373898400", "5373934190", "5373934195", "5373960350", "5373964550", "5373967033 ", "5373973310",
                "5373973320", "5373973322", "5373979622", "5373986048", "5374005004", "5374011509", "5374020071", "5374030684", "5374030749", "5374036513", "5374067732", "5374104115", "5374110143",
                "5374128009", "5374160076", "5374169693", "5374175634", "5374181705", "5374187574", "5374205178", "5374235265", "5374238395", "5374249040", "5374259665", "5374264951", "5374286230",
                "5374293741", "5374302129", "5374312948", "5374323635", "5374323637", "5374338579", "5374363487", "5374396137", "5374432956", "5374459774", "5374465315", "5374466512", "5374472305",
                "5374483784", "5374483799", "5374605716", "5374611103", "5374620665", "5374621895", "5374627211", "5374638084", "5374638147", "5374653120", "5374654015", "5374654025", "5374677265",
                "5374691292", "5374712697", "5374723414", "5374728779", "5374734106", "5374771813", "5374902163", "5374914097", "5374924316", "5374930200", "5374931625", "5374931628", "5374956219",
                "5374980667", "5374984190", "5375015821", "5375027026", "5375032559", "5375032718", "5375038171", "5375043752", "5375045885", "5375067581", "5375075870", "5375075876", "5375090357", "5375095572", "5375100766", "5375122072", "5375127180", "5375157440", "5375181022", "5375185585", "5375301780", "5375308353", "5375327298", "5375332056", "5375350816", "5375355340",
                "5375355356", "5375359972", "5375359977", "5375362113", "5375369068", "5375369074", "5375373685", "5375396508", "5375405727", "5375410259", "5375419419", "5375423613", "5375437708",
                "5375446833", "5375456230", "5375469848", "5375474494", "5375476620", "5375497248", "5375504311", "5375701092", "5375708806", "5375915527", "5375915529", "5375931282", "5375931287",
                "5375942705", "5375949357", "5375956341", "5375987929", "5375997093", "5376014531", "5376034783", "5376034799", "5376047569", "5376047579", "5376069431", "5376077814", "5376089561",
                "5376133783", "5376139562", "5376141737", "5376150889", "5376150905"};
        String[] joinId100s = {"5373471048", "5373473350", "5373486790", "5373496980", "5373504235", "5373507432", "5373512598", "5373530470", "5373538689", "5373538704", "5373554177", "5373554199", "5373559230",
                "5373559238", "5373561379", "5373564344", "5373584811", "5373589932", "5373589947", "5373594753", "5373596977", "5373609222", "5373615116", "5373617261", "5373620103", "5373625133",
                "5373630038", "5373632159", "5373639048", "5373654658", "5373654791", "5373664731", "5373671699", "5373674481", "5373684581", "5373708626", "5373713751", "5373724517", "5373739612",
                "5373746806", "5373756946", "5373774058", "5373774868", "5373779798", "5373781928", "5373784882", "5373786976", "5373811946", "5373822444", "5373840378", "5373850830", "5373854241",
                "5373864989", "5373867117", "5373875984", "5373881346", "5373883694", "5373885823", "5373898400", "5373934190", "5373934195", "5373960350", "5373964550", "5373967033 ", "5373973310",
                "5373973320", "5373973322", "5373979622", "5373986048", "5374005004", "5374011509", "5374020071", "5374030684", "5374030749", "5374036513", "5374067732", "5374104115", "5374110143",
                "5374128009", "5374160076", "5374169693", "5374175634", "5374181705", "5374187574", "5374205178", "5374235265", "5374238395", "5374249040", "5374259665", "5374264951", "5374286230",
                "5374293741", "5374302129", "5374312948", "5374323635", "5374323637", "5374338579", "5374363487", "5374396137", "5374432956"};

        String[] joinId50s = {"5373471048", "5373473350", "5373486790", "5373496980", "5373504235", "5373507432", "5373512598", "5373530470", "5373538689", "5373538704", "5373554177", "5373554199", "5373559230",
                "5373559238", "5373561379", "5373564344", "5373584811", "5373589932", "5373589947", "5373594753", "5373596977", "5373609222", "5373615116", "5373617261", "5373620103", "5373625133",
                "5373630038", "5373632159", "5373639048", "5373654658", "5373654791", "5373664731", "5373671699", "5373674481", "5373684581", "5373708626", "5373713751", "5373724517", "5373739612",
                "5373746806", "5373756946", "5373774058", "5373774868", "5373779798", "5373781928", "5373784882", "5373786976", "5373811946", "5373822444", "5373840378"};
        String[] joinId10s = {"5373471048", "5373473350", "5373486790", "5373496980", "5373504235", "5373507432", "5373512598", "5373530470", "5373538689", "5373538704"};

        String[] joinId1s = {"5373471048"};
        for (int i = 0; i < 100000; i++) {
            long start = System.nanoTime();
            FeatureResult results = featureView.getOnlineFeatures(joinId200s, new String[]{"*"}, null);
            long end = System.nanoTime();
            costs[i]= Double.valueOf(String.format("%.2f", (end - start)/1000000.0));
            if (null == results.getFeatureData()) {
                System.out.println("not found data");
            } else {
//            while (results.next()) {
//                for (String field : results.getFeatureFields()) {
//                    System.out.printf("%s = %s\t", field, results.getObject(field));
//                }
                System.out.println("data length:" + results.getFeatureData().size());
//            }
            }
        }

        double avergeTime = Arrays.stream(costs).average().orElse(0.0);

        double tp90 = calculateTP(costs, 90);
        double tp95 = calculateTP(costs, 95);
        double tp99 = calculateTP(costs, 99);
        System.out.println("Average time: " + String.format("%.2f ms", avergeTime));
        System.out.println("TP90: " + String.format("%.2f ms", tp90));
        System.out.println("TP95: " + String.format("%.2f ms", tp95));
        System.out.println("TP99: " + String.format("%.2f ms", tp99));

    }

    public static double calculateTP(double[] responseTimes, int percentile) {
        if (responseTimes == null || responseTimes.length == 0) {
            throw new IllegalArgumentException("响应时间数组不能为空");
        }

        if (percentile < 0 || percentile > 100) {
            throw new IllegalArgumentException("百分位数必须在0-100之间");
        }

        // 对响应时间进行排序
        double[] sortedTimes = responseTimes.clone();
        Arrays.sort(sortedTimes);

        // 计算指定百分位数的位置
        int index = (int) Math.ceil(percentile / 100.0 * sortedTimes.length) - 1;

        // 确保索引不越界
        if (index < 0) {
            index = 0;
        } else if (index >= sortedTimes.length) {
            index = sortedTimes.length - 1;
        }

        return sortedTimes[index];
    }

}
